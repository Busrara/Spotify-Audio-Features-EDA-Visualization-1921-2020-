# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
file_path = "enter-your-csv-path"
df = pd.read_csv(file_path)

# Drop rows with missing values in key columns
df.dropna(subset=['year', 'danceability', 'energy', 'valence', 'acousticness', 'loudness', 'artists'], inplace=True)

# Convert 'year' to integer in case it's read as float
df['year'] = df['year'].astype(int)

# ----------------------
# ðŸŽ¼ 1. Danceability Over Time
# ----------------------
danceability_by_year = df.groupby('year')['danceability'].mean().reset_index()
plt.figure(figsize=(12,6))
sns.lineplot(data=danceability_by_year, x='year', y='danceability', color='coral')
plt.title('Average Danceability Over Time', fontsize=14)
plt.xlabel('Year')
plt.ylabel('Danceability')
plt.grid(True)
plt.tight_layout()
plt.show()

# ----------------------
# ðŸŽ» 2. Energy Over Time
# ----------------------
energy_by_year = df.groupby('year')['energy'].mean().reset_index()
plt.figure(figsize=(12,6))
sns.lineplot(data=energy_by_year, x='year', y='energy', color='teal')
plt.title('Average Energy Over Time', fontsize=14)
plt.xlabel('Year')
plt.ylabel('Energy')
plt.grid(True)
plt.tight_layout()
plt.show()

# ----------------------
# ðŸ§˜ 3. Acousticness vs. Valence
# ----------------------
plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='acousticness', y='valence', alpha=0.4)
plt.title('Acousticness vs Valence', fontsize=14)
plt.xlabel('Acousticness')
plt.ylabel('Valence')
plt.grid(True)
plt.tight_layout()
plt.show()

# ----------------------
# ðŸŽ¤ 4. Most Productive Artists
# ----------------------
from collections import Counter
import ast

# Flatten the list of all artists
artist_lists = df['artists'].apply(lambda x: ast.literal_eval(x))
all_artists = [artist for sublist in artist_lists for artist in sublist]
artist_counts = Counter(all_artists)

# Get top 10 artists
top_artists = pd.DataFrame(artist_counts.most_common(10), columns=['Artist', 'Song Count'])
plt.figure(figsize=(12,6))
sns.barplot(data=top_artists, y='Artist', x='Song Count', palette= 'viridis')
plt.title('Top 10 Most Productive Artists', fontsize=14)
plt.tight_layout()
plt.show()

# ----------------------
# ðŸ“… 5. Number of Songs Per Year
# ----------------------
songs_per_year=df['year'].value_counts().sort_index()
plt.figure(figsize=(14,6))
sns.barplot(x=songs_per_year.index, y=songs_per_year.values, color='skyblue')
plt.title('Number of Songs Released Each Year', fontsize=14)
plt.xlabel('Year')
plt.ylabel('Number of Songs')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# ----------------------
# ðŸ§  6. Correlation Heatmap
# ----------------------
features =  ['danceability', 'energy', 'valence', 'acousticness', 'instrumentalness', 'liveness', 'speechiness', 'loudness']
correlation = df[features].corr()
plt.figure(figsize=(10,8))
sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Feautre Correlation Heatmap', fontsize=14)
plt.tight_layout()
plt.show